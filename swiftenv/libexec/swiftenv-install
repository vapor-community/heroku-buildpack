#!/usr/bin/env bash
# Usage: swiftenv install <version>
# completes

set -e

# Check if the given version is already installed
check_installed() {
  local VERSION
  VERSION="$1"

  local PREFIX
  PREFIX="$(swiftenv-prefix "$VERSION" || true)"
  if [ -d "$PREFIX" ]; then
    echo "$VERSION is already installed."

    if [ -n "$SKIP_EXISTING" ]; then
      update_version_files
      exit 0
    fi

    exit 1
  fi
}

update_version_files() {
  if ([ "$set_global" == "auto" ] && [ "$set_local" == "false" ]); then
    swiftenv-global "$VERSION"
  elif ([ "$set_global" == "true" ]); then
    swiftenv-global "$VERSION"
  fi

  if [ "$set_local" == "true" ]; then
    swiftenv-local "$VERSION"
  fi
}

get_platform() {
  if [ -n "$SWIFTENV_PLATFORM" ]; then
    echo "$SWIFTENV_PLATFORM"
    return
  fi

  if [ -n "$PLATFORM" ]; then
    echo "$PLATFORM"
    return
  fi

  case $(uname) in
  'Linux' )
    if command -v "lsb_release" >/dev/null 2>&1; then
      if [ $(lsb_release -is) = "Ubuntu" ]; then
        echo "ubuntu$(lsb_release -rs)"
      elif [ $(lsb_release -ius) = "Ubuntu" ]; then
        echo "ubuntu$(lsb_release -rus)"
      else
        echo "unsupported-platform"
      fi
    elif [ -r "/etc/lsb-release" ]; then
      echo "The `lsb_release` command line tool is missing. `/etc/lsb-release` file is found."
      exit 1
    fi
    ;;
  'Darwin' )
    echo "osx"
    ;;
  * )
    echo "unsupported-platform"
    ;;
  esac
}

install_binary() {
  local VERSION
  local URL
  VERSION="$1"
  URL="$2"

  if [[ "$URL" = *".pkg" ]]; then
    if [ "$(uname)" != "Darwin" ]; then
      echo "Cannot install .pkg from $URL on non macOS platform $(uname)."
      exit 1
    fi

    install_pkg_binary "$URL"
  elif [[ "$URL" = *".tar.gz" ]]; then
    install_tar_binary "$VERSION" "$URL"
  else
    echo "swiftenv does not know how to install $URL. Only tar.gz and pkg files are supported."
    exit 1
  fi
}

download() {
  URL=$1
  FILE=$2

  if ! [ -r "$FILE" ]; then
    curl -C - -Lo "$FILE.download" "$URL"
    mv "$FILE.download" "$FILE"
  fi
}

# Install a tarball binary from the supplied URL
install_tar_binary() {
  local VERSION
  local URL
  VERSION="$1"
  URL="$2"

  INSTALL_TMP="$TMPDIR/swiftenv-$VERSION-$USER"

  mkdir -p "$INSTALL_TMP"

  echo "Downloading $URL"

  pushd "$INSTALL_TMP"
  download "$URL" "swift-$VERSION.tar.gz"

  if $verify; then
    curl -o "swift-$VERSION.sig" "$URL.sig"
    gpg --verify "swift-$VERSION.sig"
  fi

  tar xzf "swift-$VERSION.tar.gz"
  popd

  DESTINATION="$SWIFTENV_ROOT/versions/$VERSION"
  mv "$INSTALL_TMP/swift-$VERSION_RELEASE"*/ "$DESTINATION"

  if $clean; then
    rm -fr "$INSTALL_TMP"
  fi
}

# Installs an `.pkg` binary from the supplied URL
install_pkg_binary() {
  local URL
  URL="$1"
  PKG="$TMPDIR/swiftenv-$VERSION-$USER.pkg"

  download "$URL" "$PKG"

  if $user; then
    installer -pkg "$PKG" -target CurrentUserHomeDirectory
  else
    sudo installer -pkg "$PKG" -target LocalSystem
  fi

  if $clean; then
    rm -fr "$PKG"
  fi
}

sort_versions() {
  sed 'h; s/[+-]/./g; s/.p\([[:digit:]]\)/.z\1/; s/$/.z/; G; s/\n/ /' | \
    LC_ALL=C sort -t. -k 1,1 -k 2,2n -k 3,3n -k 4,4n -k 5,5n | awk '{print $2}'
}

clean=true
verbose=false
verify=false
set_global=auto
set_local=false
completes=false
user=true

if [ "$(uname)" == "Darwin" ]; then
  user=false
fi

if [ -n "$SWIFTENV_VERIFY" ] && [ "$SWIFTENV_VERIFY" != "false" ]; then
  verify=true
fi

unset SKIP_EXISTING

for args in "$@"; do
  if [ "$args" = "--no-clean" ]; then
    clean=false
  elif [ "$args" = "--clean" ]; then
    clean=true
  elif [ "$args" = "--complete" ]; then
    completes=true
  elif [ "$args" = "--skip-existing" ] || [ "$args" = "-s" ]; then
    SKIP_EXISTING=true
  elif [ "$args" = "--verbose" ]; then
    verbose=true
  elif [ "$args" = "--no-verbose" ]; then
    verbose=false
  elif [ "$args" = "--verify" ]; then
    verify=true
  elif [ "$args" = "--no-verify" ]; then
    verify=false
  elif [ "$args" = "--no-set-global" ]; then
    set_global=false
  elif [ "$args" = "--no-set-local" ]; then
    set_local=false
  elif [ "$args" = "--set-global" ]; then
    set_global=true
  elif [ "$args" = "--set-local" ]; then
    set_local=true
  elif [ "$args" = "--user" ]; then
    user=true
  elif [ "$args" = "--no-user" ]; then
    user=false
  else
    VERSION="$args"
  fi

  shift
done

vlog() {
  if $verbose; then
    echo "$1"
  fi
}

if $completes; then
  echo "--verbose"
  echo "--no-verbose"
  echo "--verify"
  echo "--no-verify"
  echo "--clean"
  echo "--no-clean"
  echo "--set-global"
  echo "--no-set-global"
  echo "--set-local"
  echo "--no-set-local"
  echo "--user"
  echo "--no-user"
  exit
fi

mkdir -p "$SWIFTENV_ROOT/versions"
if [ -z "$VERSION" ] ; then
  VERSION="$(swiftenv-version-name --dont-check)"

  if [ "$set_global" == "auto" ]; then
    set_global=false
  fi

  if [ "$VERSION" == "system" ]; then
    echo "Usage: swiftenv install <version>"
    exit 1
  fi
fi

if [ -z "$TMPDIR" ] ; then
  export TMPDIR=/tmp
fi

if [[ "$VERSION" == "https://"* ]]; then
  URL="$VERSION"
  VERSION="${URL##*/}"
  VERSION="${VERSION%-*}"
fi

VERSION="${VERSION##swift-}"
PLATFORM="$(get_platform)"

check_installed "$VERSION"

if ! $user; then
  if [ "$(uname)" != "Darwin" ]; then
    echo "--no-user installation is only supported on macOS."
    exit 1
  fi
fi

# Install Binary
if [ -z "$URL" ]; then
  # Check for locally cached URL
  PROFILE="$SWIFTENV_SOURCE_PATH/share/swiftenv-install/$VERSION"
  if [ -r "$PROFILE" ]; then
    source "$PROFILE"
  fi
fi

if [ "$URL" ]; then
  vlog "Installing $VERSION from $URL on $(get_platform)."
  install_binary "$VERSION" "$URL"
else
  echo "Swift $VERSION is not supported."
  echo "The buildpack only supports Swift 5.9.1 and later."
  echo
  echo "If you need an older version of Swift, you can revert to an older version of the buildpack."
  echo "Use the full URL of its Git repo and a tag."
  echo
  echo "Example:"
  echo "  heroku buildpacks:set https://github.com/vapor-community/heroku-buildpack.git#5101-release"
  echo
  exit 1
fi


echo "$VERSION has been installed."
swiftenv-rehash

update_version_files
